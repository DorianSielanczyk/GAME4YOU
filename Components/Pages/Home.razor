@page "/"
@using GAME4YOU.Components.Modal
@using GAME4YOU.Services
@using GAME4YOU.Entities
@inject IServiceScopeFactory ScopeFactory
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<link href="home.css" rel="stylesheet" />

<div class="navbar">
    <NavLink href="/" style="text-decoration: none;">
        <span class="game-text">
            <span class="game">GAME</span>4YOU
        </span>
    </NavLink>

    <div class="search-container">
        <input type="text" class="search-bar" placeholder="Szukaj..." @bind="SearchQuery" @oninput="@LoadProducts">
        <div class="d-flex align-items-center">
            <div class="form-group me-3">
                <select id="categorySelect" class="form-select" @bind="@SelectedCategoryId" @bind:after="@LoadProducts">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id" >@category.Name</option>
                    }
                </select>
            </div>
        </div>

        <button class="search-button" @onclick="@LoadProducts">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="icon-search">
                <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
            </svg>
        </button>
    </div>

    <div class="nav-icons">
        <div class="profile-container">
            <NavLink href="#" style="text-decoration: none; color: white;" @onclick="HandleProfileClick">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1" stroke="currentColor" class="icon-profile">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0 0 12 15.75a7.488 7.488 0 0 0-5.982 2.975m11.963 0a9 9 0 1 0-11.963 0m11.963 0A8.966 8.966 0 0 1 12 21a8.966 8.966 0 0 1-5.982-2.275M15 9.75a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                </svg>
            </NavLink>

            @if (ShowLoginModal)
            {
                <div class="modal-login">
                    <div class="modal-content-login">
                        <p class="login-modal-text">Aby przejść do tej zakładki, musisz się zalogować.</p>
                        <div class="modal-buttons-login">
                            <button class="login-modal-button1" @onclick="CloseModal">Zamknij</button>
                            <button class="login-modal-button2" @onclick="NavigateToLogin">Zaloguj się</button>
                        </div>
                    </div>
                </div>
            }

            <div class="nav-links">
                @if (!IsLoggedIn)
                {
                    <NavLink href="/login" class="nav-link" style="text-decoration: none; color: white;">Zaloguj się</NavLink>
                    <NavLink href="/register" class="nav-link" style="text-decoration: none; color: white;">Załóż konto</NavLink>
                }
                else
                {
                    <p class="nav-link-logout" @onclick="Logout">Wyloguj</p>
                }
            </div>
        </div>
        <NavLink href="/cart" style="text-decoration: none; color: white;">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="icon-cart">
                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
            </svg>
        </NavLink>
    </div>
</div>

<div class="product-list">
    @foreach (var product in Products)
    {
        <div class="product-card" @onclick="() => Open(product)">
            <img src="@product.ImagePath" alt="@product.Name" class="product-image" />
            <div class="product-details">
                <h3 class="product-name">@product.Name</h3>
                <p class="product-category">@product.Category?.Name</p>
                <div class="product-pricehome">@($"{product.Price:F2}") zł</div>
            </div>
        </div>
    }
</div>

<ModalDialog @ref="@ModalDialog">
    <div class="row">
        @if (SelectedProduct != null)
        {
            <div class="product-modal">
                <div class="product-modal-image">
                    <img src="@SelectedProduct.ImagePath" alt="@SelectedProduct.Name" class="img-fluid" />
                </div>
                <div class="product-modal-details">
                    <h3 class="product-modal-description">@SelectedProduct.Name</h3>
                    <p>@SelectedProduct.Description</p>
                    <p class="product-category"><strong>Kategoria:</strong> @SelectedProduct.Category?.Name</p>
                    <p class="product-seller"><strong>Sprzedawca:</strong> @($"{SelectedProduct.User?.FirstName} {SelectedProduct.User?.LastName}")</p>
                    <p class="product-created"><strong>Data utworzenia:</strong> @SelectedProduct.CreatedAt.ToString("yyyy-MM-dd HH:mm")</p>
                </div>
            </div>
            <div class="modal-footer">
                <div class="product-price">@($"{SelectedProduct.Price:F2}") zł</div>
                <button class="btn btn-success" @onclick="HandleCartClick">Dodaj do koszyka</button>
                <button class="btn btn-primary">Kup teraz</button>
            </div>
        }
    </div>
</ModalDialog>

@code {
    private List<Product> Products = new List<Product>();
    private List<Category> Categories = new List<Category>();
    private ModalDialog ModalDialog { get; set; }
    private Product SelectedProduct { get; set; }
    private int SelectedCategoryId { get; set; } = 6;
    private bool IsLoggedIn;
    private string SearchQuery = "";
    private bool _isFirstRender = true;
    private bool ShowLoginModal = false;

    private void Open(Product product)
    {
        SelectedProduct = product;
        ModalDialog.Open(product);
    }

    private async Task LoadProducts()
    {
        using (var scope = ScopeFactory.CreateScope())
        {
            var productService = scope.ServiceProvider.GetRequiredService<ProductService>();
            if (SelectedCategoryId == 6)
            {
                Products = await productService.GetProductsAsync();
            }
            else
            {
                Products = await productService.GetProductsByCategoryAsync(SelectedCategoryId);
            }
            if (!string.IsNullOrEmpty(SearchQuery))
            {
                Products = Products.Where(p => p.Name.ToLower().Contains(SearchQuery.ToLower())).ToList();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ScopeFactory.CreateScope())
        {
            var productService = scope.ServiceProvider.GetRequiredService<ProductService>();
            var categoryService = scope.ServiceProvider.GetRequiredService<CategoryService>();
            Categories = await categoryService.GetCategoriesAsync();
            await LoadProducts();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            IsLoggedIn = !string.IsNullOrEmpty(token);
            StateHasChanged();
        }
    }

    private void HandleProfileClick()
    {
        if (IsLoggedIn)
        {
            Navigation.NavigateTo("/profile");
        }
        else
        {
            ShowLoginModal = true;
        }
    }

    private void HandleCartClick()
    {
        if (IsLoggedIn)
        {
            Navigation.NavigateTo("/cart");
        }
        else
        {
            ShowLoginModal = true;
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        IsLoggedIn = false;
        StateHasChanged();
    }

    private void NavigateToLogin()
    {
        ShowLoginModal = false;
        Navigation.NavigateTo("/login");
    }


    private void CloseModal()
    {
        ShowLoginModal = false;
    }
}
